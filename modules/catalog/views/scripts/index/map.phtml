<?php
	$this->headScript()
		->appendFile('http://maps.google.com/maps?file=api&amp;v=2&amp;key='.$this->apiKey);
//		->appendFile('http://gmaps-utility-library.googlecode.com/svn/trunk/markermanager/release/src/markermanager.js');
//		->appendFile('js/frontend/catalog/gmaps.js');
?>
<div id="loader"> Wczytuję ..<em>proszę czekać!</em></div>
<div id="gmap-load-id" style="display: none;"><?php print $this->escape($this->id)?></div>

<div class="span-12">
	<div id="map" style="width: 470px; height: 400px;"></div>
</div>
<div class="span-6 last">
	<div id="map-search-options">
		<h4>Rodzaje wizytówek</h4>
		<ul id="catalog-type" />
	</div>
	<p class="msg-info">Aby ograniczyć rekordy do danej dzielnicy, wybierz dzielnicę z lewego bloku strony</p>
</div>

<script type="text/javascript">
<!--

function basename(path, suffix) {
    // http://kevin.vanzonneveld.net
    // +   original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +   improved by: Ash Searle (http://hexmen.com/blog/)
    // +   improved by: Lincoln Ramsay
    // +   improved by: djmix
    // *     example 1: basename('/www/site/home.htm', '.htm');
    // *     returns 1: 'home'
 
    var b = path.replace(/^.*[\/\\]/g, '');
    if (typeof(suffix) == 'string' && b.substr(b.length-suffix.length) == suffix) {
        b = b.substr(0, b.length-suffix.length);
    }
    return b;
}
/**
 * Google Maps, jQuery dialog + selecting lat lang! 
 */
$(document).ready(function(){
	// działanie AJAX
	$('#loader')
		.ajaxStart(function(){$(this).show()})
		.ajaxStop(function(){$(this).hide()});

	var map = null;

	// czy jest zaznaczony aktualny rekord
	var catalogId = parseInt($('#gmap-load-id').text());

	// wczytywanie rekordow
	var urlLoadNear = '/catalog/index/json';
	$.ajax({
		'url': 		urlLoadNear,
		'dataType':	'json',
		'success': function(data) {
			if (GBrowserIsCompatible()) {
				map = new GMap2(document.getElementById("map"));

				map.addControl(new GLargeMapControl());
		        map.addControl(new GMapTypeControl());
		        
				var center = new GLatLng(50.03950183762877, 19.9072265625);
				map.setCenter(center, 12);

				loadAndRenderGMarkers(data, map);
				renderTypes();
				initDistrict();
			}
		}
	});

	// adres bazowy strony
	var url = '<?php print KontorX_View_Helper_BaseUrl::getDomain()?>';

	var markerIcons = new Array();

	// tworzenie ikony markera
	var iconShadowPath = url + 'upload/catalog/ico_shadow.png';
	var createMarkerIcon = function(row) {
		type = row.catalog_type_id;
		if (markerIcons[type] == undefined) {
			var icon = new GIcon(G_DEFAULT_ICON);
			icon.image = url + row.type_ico_href;
			icon.shadow = iconShadowPath;
			icon.iconSize = new GSize(16, 16);
			icon.iconAnchor = new GPoint(16, 16);
			icon.infoWindowAnchor = new GPoint(16, 0);
			markerIcons[type] = icon;
		}
		return markerIcons[type];
	};

	// tworzenie okna z infrmacja
	var createInfoWindowHtml = function (row) {
		return '<h4>'+row.name+'</h4>'+
				'<dl>'+
					'<dt>adres</dt>'+
					'<dd>'+row.adress+'</dd>'+
					'<dt>kontakt</dt>'+
					'<dd>'+row.contact.replace("\n",'<br/>')+'</dd>'+
				'</dl>'+
				'<p><a href="/stomatolog/'+row.id+'" target="_blank">zobacz wizytówkę</a></p>';
	};

	var types = [];
	var typesExsists = [];
	var addType = function (row) {
		var type = row.catalog_type_id;

		if (typesExsists[type] == undefined) {
			typesExsists[type] = true;
			types.push(row);
		}
	};

	var renderTypes = function() {
		var ul = $('#catalog-type');
		for ( var i = 0; i < types.length; i++) {
			ul.append(createTypeElement(types[i]));
		}
	};

	var createTypeElement = function(row) {
		var element = $('<input type="checkbox" checked="checked" value="'+row.catalog_type_id+'"/>')
			.click(function() {
				if (!this.checked) {
					hideMarkersType(this.value);
				} else {
					showMarkersType(this.value);
				}
			});
		
		return $('<li/>').html($('<label/>')
			.append(element)
			.append('<img src="'+row.type_ico_href+'"/><span>'+ row.type_name+'</span>'));
	};
	// wczytaj i wyrenderuj rekordy
	
	var marker = null;
	var markerLatLng = null;
	var markerWidowHtml = null;

	var markersTypes = [];

	var addMarkerAsType = function(marker, row) {
		var type = row.catalog_type_id;

		if (markersTypes[type] == undefined) {
			markersTypes[type] = [];
		}

		markersTypes[type].push(marker);
	};

	var getMarkersAsType = function (type) {
		if (markersTypes[type] == undefined) {
			alert('Typ nie istnieje');
			return [];
		}

		return markersTypes[type];
	};

	var markersDistrict = [];

	var addMarkerAsDistrict = function(marker, row) {
		var district_url = row.district_url;

		if (markersDistrict[district_url] == undefined) {
			markersDistrict[district_url] = [];
		}

		markersDistrict[district_url].push(marker);
	};

	var getMarkersAsDistrict = function (district_url) {
		if (markersDistrict[district_url] == undefined) {
			alert('Obszar nie istnieje');
			return [];
		}

		return markersDistrict[district_url];
	};

	var loadAndRenderGMarkers = function (data, map) {
		var row = null;
		var lat = null;
		var lng = null;

		for ( var i = 0; i < data.length; i++) {
			row = data[i];
			lat = row.lat;
			lng = row.lng;

			if (parseInt(lat) == 0 || parseInt(lng) == 0) {
				// TODO Dodać geolokalizacje + oznaczenie pozycji jako niepewnej ..
				continue;
			} else {
				markerLatLng = new GLatLng(lat,lng);
				marker= new GMarker(markerLatLng, {
					title: row.name,
					icon: createMarkerIcon(row)
				});

				addType(row);
				addMarkerAsType(marker, row);
				addMarkerAsDistrict(marker, row);
			}

			// tworzymy widok
			var markerWidowHtml = createInfoWindowHtml(row);

			// otwieramy window
			if (row.id == catalogId) {
				marker.openInfoWindowHtml(markerWidowHtml);
			} else {
				marker.bindInfoWindowHtml(markerWidowHtml);
			}
			
			// marker.getIcon(new G);
			map.addOverlay(marker);
		}
	};

	var hideMarkersType = function (type) {
		var data = getMarkersAsType(type);
		for (var i = 0; i < data.length; i++) {
			map.removeOverlay(data[i]);
		}
	}

	var showMarkersType = function (type) {
		var data = getMarkersAsType(type);
		for (var i = 0; i < data.length; i++) {
			map.addOverlay(data[i]);
		}
	}

	var hideMarkersDistrict = function (district_url) {
		var data = getMarkersAsDistrict(district_url);
		for (var i = 0; i < data.length; i++) {
			map.removeOverlay(data[i]);
		}
	}

	var showMarkersDistrict = function (district_url) {
		var data = getMarkersAsDistrict(district_url);
		for (var i = 0; i < data.length; i++) {
			map.addOverlay(data[i]);
		}
	}

	var districtClicked = [];
	var initDistrict = function() {
		$('#regions ul li a').click(function() {
			var district_url = basename(this.href);
			if (districtClicked[district_url] == undefined
					|| districtClicked[district_url] == false)
			{
				hideMarkersDistrict(district_url);
				districtClicked[district_url] = true;
				$(this).addClass('selected');
			} else {
				showMarkersDistrict(district_url);
				districtClicked[district_url] = false;
				$(this).removeClass('selected');
			}

			return false;
		});
	};
});
//-->
</script>